<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Gugrontid map</title>
    <style>
     html, body {
       width:  100%;
       height: 100%;
       margin: 0px;
     }

     #map_controls {
       position: absolute;
       background-color: rgba(149, 193, 168, 0.6);
       left: 0;
       top: 0;
       padding: 5px;
     }

     #map_controls h2 {
       font-size: 12pt;
       color: #36114D;
     }

     #map_controls ul {
       list-style-type: square;
     }
    </style>
  </head>

  <body>
    <canvas id="map_canvas"></canvas>
    
    <div id="map_controls">
      <div id="map_links">
      </div>

      <h2>Your position</h2>
      <input type="text" id="custom_pos" placeholder="region x y">
    </div>

    <script>
     /**
      * Loads map image to canvas and place markers.
      */

     //The categories of the markers
     var m_categories = {
       characters: {
         name: "Characters",
         description: "NPCs like monsters, quest givers, trainers, traders etc.",
         def_image: "char.gif"
       },
       crafting_places: {
         name: "Crafting places"
       },
       mining_places: {
         name: "Mining places",
         def_image: "gather.gif"
       }
     };

     //This array contains positions of markers
     var markers = [{
       name: "Guy Dudesson",
       location: [32, 135],
       category: 'characters'
     }, {
       name: "Troll Lolo",
       location: [133, 337],
       category: 'characters'
     }, {
       name: "Parker Peters",
       location: [400, 23],
       category: 'characters'
     }, {
       name: "Mr. X",
       location: [532, 123],
       category: 'characters'
     }, {

       image: "craft.gif",
       name: "Work bench",
       location: [[200, 200], [200, 300], [450, 129]],
       category: 'crafting_places'
     }, {
       image: "craft.gif",
       name: "Sock maker",
       location: [232, 312],
       category: 'crafting_places'
     }, {
       image: "craft.gif",
       name: "Fire bender",
       location: [275, 200],
       category: 'crafting_places'
     }, {

       name: "Gold",
       location: [[321, 123], [32, 400]],
       category: 'mining_places'
     }, {
       name: "Silver",
       location: [666, 432],
       category: 'mining_places'
     }, {
       name: "Diamonds",
       location: [311, 164],
       category: 'mining_places'
     }];

     //Drawmodes for regions, do not change those...
     var REG_RECT = 1;
     var REG_POLY = 2;
     var REG_POLY_LIST = 4;
     var REG_POINT = 5; //Used to "portal regions" and similar that are not displayed on the map

     //Regions for the map
     var map_regions = [{
       indexName: 'testreg1',
       color: '#ff0145',
       shape: [REG_RECT, 32, 64, 156, 403]
     }, {
       indexName: 'iccreamland',
       color: '#a22195',
       shape: [REG_POLY, [200, 2], [200, 300], [400, 300], [400, 250], [300, 250], [300, 2]]
     }, {
       indexName: 'stonekor',
       color: '#238132',
       shape: [REG_POLY_LIST, [[500, 100], [500, 200], [600, 200], [600, 100]], 
               [[10, 500], [10, 520], [30, 520], [30, 500]]]
     }, {
       indexName: 'ulbergate',
       shape: [REG_POINT, 500, 34]
     }];

     //Custom user settings
     //Hidden map markers
     var hidden_categories = ['characters'];
     var hidden_markers = [];

     //Static settings
     //Where to find position 0, 0 in the world
     var COORD_X = 0;
     var COORD_Y = 0;
     var SCALE = 50; //How far is 100 steps is on the map
     //Map image
     var mapimg = 'gugrontid.jpg';

     //Your marker
     var here_icon = 'here.gif';
     var here_indexName = 'here_pos';

     //For highlighting markers
     var orginal_alpha = 1;
     var fade_alpha = 0.4;

     var ups = 200; //Updates per second

     /***/

     var c = document.getElementById("map_canvas");
     var ctx = c.getContext("2d");

     //Load the map
     var mapObj = new Image();

     mapObj.onload = function() {
       setInterval(function() {
         draw();
       }, ups);
     };

     mapObj.src = mapimg;

     var drawables = [];
     var imageMap = []; //Stores images for reuse

     //Store every marker by a unique key 'name', often similar to the name attribute
     var name_indexed_markers = {};

     //List all categories as HTML elements
     for (var key in m_categories) {
       if(m_categories.hasOwnProperty(key)) {
         //The category object
         var obj = m_categories[key];

         //Create category header
         var header = document.createElement('h2');
         header.appendChild(document.createTextNode(obj.name));

         document.getElementById('map_links').appendChild(header);

         //List where the markers go
         var list = document.createElement('ul');
         list.setAttribute('id', 'lst_' + key);

         document.getElementById('map_links').appendChild(list);
       }
     }

     //Put the markers in the draw array
     //and in the HTML list as links
     for(var i = 0; i < markers.length; i++) {
       //Fuse togheter the spaces to create the name
       markers[i].indexName = markers[i].name.replace(/\s+/g, '_');
       //Remove special characters
       markers[i].indexName = markers[i].indexName.replace(/\.+/g, '');
       markers[i].indexName = markers[i].indexName.toLowerCase();

       //Are there already one such name? Then add a number to it
       if(name_indexed_markers[markers[i].indexName] != null) {
         markers[i].indexName += name_indexed_markers.length;
       }

       //Put the marker in the index array
       name_indexed_markers[markers[i].indexName] = markers[i];

       //Location means there are something to put in drawables
       //Location could be an array, be aware!
       var locations = markers[i].location;

       //Since location stores the value in format [x, y]
       //it is needed to warp it in an array so the single positions do not got looped through
       if(!Array.isArray(markers[i].location[0])) {
         locations = [markers[i].location];
       }

       //Do the marker have an image, else fetch a default one
       if(markers[i].image == null) {
         markers[i].image = m_categories[markers[i].category].def_image;
       }

       var icoObj = null;

       //See if there are a reusable image available
       for(var j = 0; j < imageMap.length; j++) {
         if(imageMap[j].src.indexOf(markers[i].image, imageMap[j].length - markers[i].image.length)
           !== -1) {
           icoObj = imageMap[j];
           break;
         }
       }

       //Store the image for future use
       if(icoObj == null) {
         icoObj = new Image();

         icoObj.src = markers[i].image;

         imageMap.push(icoObj);
       }

       //Put every location in the drawable array
       for(var j = 0; j < locations.length; j++) {
           drawables.push({
             indexName: markers[i].indexName, 
             image: icoObj,
             x: locations[j][0],
             y: locations[j][1]
           });
       }

       //Add to the HTML list
       //TODO: Maybe one marker can have several catergories, add to them all
       var html_list_item = document.createElement('li');
       html_list_item.style["list-style-image"] = "url(" + markers[i].image  + ")";

       //Link to display them on the map
       var html_link_item = document.createElement('a');
       html_link_item.setAttribute('href', '#' + markers[i].indexName);
       html_link_item.appendChild(document.createTextNode(markers[i].name));

       html_list_item.appendChild(html_link_item);

       document.getElementById('lst_' + markers[i].category).appendChild(html_list_item);
     }

     //Calculate scale
     var scale = SCALE / 100;

     //When the url change, set fade the markers in the same manner
     window.addEventListener("hashchange", function() {
       //Find the button
       var show_name = window.location.hash.replace("#", "");

       //Loop through the array, move all that are not selected
       //those will be less visible
       for(var j = 0; j < drawables.length; j++) {
         if(drawables[j].indexName != show_name) {
           drawables[j].fade = true;
         }
         else {
           drawables[j].fade = false;
         }
       }
     });

     //Plot point when typing in the input box
     document.getElementById("custom_pos").addEventListener("keyup", function() {
       //There are several ways to separate coords
       var pos_string = this.value.split(/[\s,;:]/);
       //Figure out what been typed in the boxes
       //This just put the first best value in the first best place
       var x = null;
       var y = null;
       var z = null;

       //See what can be found
       for(var i = 0; i < pos_string.length; i++) {
         //Get rid of some junk
         var cur_string = pos_string[i].replace(/[\[\(\{\)\}\]]/, "");

         //Empty string? Carry on
         if(cur_string == null || cur_string.length < 1) {
           continue;
         }

         //We want a number
         if(!isNaN(parseFloat(cur_string)) && isFinite(cur_string)) {
           if(x == null) {
             x = Math.round(cur_string);
           }
           else if(z == null) {
             z = Math.round(cur_string);
           }
           else if(y == null) {
             y = z;
             z = Math.round(cur_string);
           }
           else {
             break;
           }
         }
       }

       var here_drawable = null;

       //Try to find the you marker
       here_drawable = searchByIndexName(drawables, here_indexName);

       //No marker? Create one.
       if(here_drawable == null) {
         //TODO: Check if the image already exist
         var icoObj = new Image();

         icoObj.src = here_icon;

         imageMap.push(icoObj);

         here_drawable = {
             indexName: here_indexName, 
             image: icoObj,
             x: x,
             y: z
           };

         drawables.push(here_drawable);
       }

       here_drawable.x = x;
       here_drawable.y = z;
     });
     
     /***/

     /**
      * Draw loop, update map whe resized
      */
     function draw() {
       ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

       ctx.canvas.width  = window.innerWidth;
       ctx.canvas.height = window.innerHeight;

       //Scale the map to the screen
       var ih = mapObj.height;
       var iw = mapObj.width;

       //The map should retain its aspect ratio
       var aspect_ratio = iw / ih;

       var nh = ctx.canvas.height;
       var nw = nh * aspect_ratio;
       var nx = (ctx.canvas.width - nw) / 2;
       var ny = 0;
       
       if(nw > ctx.canvas.width) {
         nw = ctx.canvas.width;
         nh = nw / aspect_ratio;
         ny = (ctx.canvas.height - nh) / 2;
         nx = 0
       }

       ctx.drawImage(mapObj, nx, ny, nw, nh);

       //Markers
       //Calculate scaling offset for markers
       var scalex = (nw / iw);
       var scaley = (nh / ih);

       //Draw the markers
       for(var i = 0; i < drawables.length; i++) {
         if(drawables[i].fade) {
           ctx.globalAlpha = fade_alpha;
         }
         else {
           ctx.globalAlpha = orginal_alpha;
         }

         ctx.drawImage(
           drawables[i].image, 
           drawables[i].x * scalex + nx,
           drawables[i].y * scaley + ny);
       }

       //Regions, not sure if a separate array is needed
       for(var i = 0; i < map_regions.length; i++) {
         if(map_regions[i].color != null) {
           ctx.strokeStyle = map_regions[i].color;
         }
         else {
           ctx.strokeStyle = "#000000";
         }

         //The first element contain shape type
         switch(map_regions[i].shape[0]) {
             case REG_RECT:
             //Every element contain one of the x1, y1, x2, y2 values
             ctx.strokeRect(map_regions[i].shape[1] * scalex + nx, 
                          map_regions[i].shape[2] * scaley + ny,
                          (map_regions[i].shape[3] * scalex + nx) -
                            (map_regions[i].shape[1] * scalex + nx), 
                          (map_regions[i].shape[4] * scaley + ny) -
                            (map_regions[i].shape[2] * scaley + ny));
             break;
             case REG_POLY: 
             ctx.beginPath();

             //First point begin the polygon, note that coords comes in array of pairs
             ctx.moveTo(
               map_regions[i].shape[1][0] * scalex + nx, 
               map_regions[i].shape[1][1] * scaley + ny);

             //Lines to the other points
             for(var j = 2; j < map_regions[i].shape.length; j++) {
               ctx.lineTo(
                 map_regions[i].shape[j][0] * scalex + nx, 
                 map_regions[i].shape[j][1] * scaley + ny);
             }

             ctx.closePath();
             ctx.stroke();
             break;
             case REG_POLY_LIST:
             var shape = map_regions[i].shape;

             //Every element contain a polygon
             for(var j = 1; j < shape.length; j++) {
               ctx.beginPath();
               //Begin each polygon
               ctx.moveTo(
                 shape[j][0][0] * scalex + nx, 
                 shape[j][0][1] * scaley + ny);

               //Lines between the coordinate pairs
               for(var k = 1; k < shape[j].length; k++) {
                 ctx.lineTo(
                   shape[j][k][0] * scalex + nx, 
                   shape[j][k][1] * scaley + ny);
               }
               ctx.closePath();
               ctx.stroke();
             }
             break;
             default: break;
         }
       }
     }

     /**
      * Searches in the given array for an item containing the searched indexName.
      * 
      * @param {array} search_array  Where the search
      * @param {string} indexName  What to search for
      * @returns {Object}  null if nothing found, else the found item
      */
     function searchByIndexName(search_array, indexName) {
       for(var i = 0; i < search_array.length; i++) {
         if(search_array[i].indexName == indexName) {
           return search_array[i];
         }
       }

       return null;
     }
    </script>
  </body>
</html> 
